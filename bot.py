python-telegram-bot==20.3
echo "# connectme-bot" >> README.md
git init
git add README.md
git commit -m "–ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç"
git branch -M main
git remote add origin https://github.com/Rusya199518/connectme-bot.git
git push -u origin main
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler,
                          CallbackQueryHandler, ContextTypes, filters)

# –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users = {}
registered_count = 0

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤! –ù–∞–ø–∏—à–∏—Ç–µ /register, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
        f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {registered_count} —á–µ–ª–æ–≤–µ–∫(–∞).'
    )

# /register
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id in users:
        await update.message.reply_text('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        return

    context.user_data['registration_step'] = 'name'
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    step = context.user_data.get('registration_step')

    if step == 'name':
        context.user_data['name'] = text
        context.user_data['registration_step'] = 'age'
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')

    elif step == 'age':
        try:
            age = int(text)
            if age < 12 or age > 99:
                raise ValueError
            context.user_data['age'] = age
            context.user_data['registration_step'] = 'gender'

            keyboard = [
                [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data='gender_m'), InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data='gender_f')],
                [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='gender_o')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=reply_markup)
        except:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-99).')

    elif step == 'interests':
        context.user_data['interests'] = text
        context.user_data['registration_step'] = 'preferred_gender'

        keyboard = [
            [InlineKeyboardButton("–ú—É–∂—á–∏–Ω—ã", callback_data='prefgender_m'), InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω—ã", callback_data='prefgender_f'), InlineKeyboardButton("–õ—é–±–æ–π", callback_data='prefgender_any')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–ö–∞–∫–æ–π –ø–æ–ª –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?', reply_markup=reply_markup)

    elif step == 'preferred_age':
        try:
            age_from, age_to = map(int, text.split('-'))
            if age_from > age_to or age_from < 12 or age_to > 99:
                raise ValueError
            context.user_data['preferred_age_range'] = (age_from, age_to)

            users[user_id] = {
                'name': context.user_data['name'],
                'age': context.user_data['age'],
                'gender': context.user_data['gender'],
                'interests': context.user_data['interests'],
                'preferred_gender': context.user_data['preferred_gender'],
                'preferred_age_range': context.user_data['preferred_age_range'],
                'liked_users': [],
                'matches': 0
            }

            global registered_count
            registered_count += 1
            context.user_data.clear()

            await update.message.reply_text(
                '–°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /find –¥–ª—è –ø–æ–∏—Å–∫–∞.'
            )

        except:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18-30.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data.startswith('gender_'):
        gender = data.split('_')[1]
        context.user_data['gender'] = gender
        context.user_data['registration_step'] = 'interests'
        await query.edit_message_text('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:')

    elif data.startswith('prefgender_'):
        pref_gender = data.split('_')[1]
        context.user_data['preferred_gender'] = pref_gender
        context.user_data['registration_step'] = 'preferred_age'
        await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18-30):')

    elif data.startswith('like_'):
        partner_id = int(data.split('_')[1])
        if partner_id not in users[user_id]['liked_users']:
            users[user_id]['liked_users'].append(partner_id)

            if user_id in users[partner_id]['liked_users']:
                await query.edit_message_text(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å {users[partner_id]["name"]}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!')
            else:
                await query.edit_message_text(f'–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ {users[partner_id]["name"]}. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞...')
        else:
            await query.edit_message_text('–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.')

    elif data.startswith('message_'):
        partner_id = int(data.split('_')[1])
        if partner_id in users[user_id]['liked_users']:
            await query.edit_message_text(f'–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[partner_id]["name"]}.')
        else:
            await query.edit_message_text(f'–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ {users[partner_id]["name"]}, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.')

# /find
async def find_partner(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if user_id not in users:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register.')
        return

    user = users[user_id]
    pref_gender = user['preferred_gender']
    age_from, age_to = user['preferred_age_range']

    potential_partners = []
    for uid, info in users.items():
        if uid == user_id:
            continue
        if pref_gender != 'any' and info['gender'] != pref_gender:
            continue
        if not (age_from <= info['age'] <= age_to):
            continue
        potential_partners.append(uid)

    if not potential_partners:
        await update.message.reply_text('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.')
        return

    partner_id = random.choice(potential_partners)
    partner = users[partner_id]

    keyboard = [
        [
            InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f'like_{partner_id}'),
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f'message_{partner_id}')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f'–ú—ã –Ω–∞—à–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {partner["name"]}, –≤–æ–∑—Ä–∞—Å—Ç {partner["age"]}.', reply_markup=reply_markup)

# –ó–∞–ø—É—Å–∫
def main():
    token = '7850372200:AAFmG3xrLCa3b4tY7H7ZiyAHYvUP6eFQcVw'  # <-- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('register', register))
    app.add_handler(CommandHandler('find', find_partner))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
